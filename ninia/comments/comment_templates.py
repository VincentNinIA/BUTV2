"""
Templates de prompts pour la g√©n√©ration de commentaires intelligents
==================================================================

Ce module contient tous les templates de prompts utilis√©s par l'agent
de g√©n√©ration de commentaires selon diff√©rents contextes.
"""

from typing import Dict, Any
from datetime import datetime


class CommentTemplates:
    """Gestionnaire des templates de prompts pour commentaires."""
    
    @staticmethod
    def get_order_analysis_prompt(commande_info: Dict[str, Any]) -> str:
        """
        Template pour l'analyse d'une commande avec informations compl√®tes.
        
        Args:
            commande_info: Dictionnaire contenant toutes les informations de la commande
            
        Returns:
            str: Prompt format√© pour le LLM
        """
        # Calculer si la commande d√©pend du stock √† venir
        stock_magasin = commande_info.get('stock_magasin', 0)
        quantite_demandee = commande_info.get('quantite_demandee', 0)
        stock_a_recevoir = commande_info.get('stock_a_recevoir', 0)
        commandes_a_livrer = commande_info.get('commandes_a_livrer', 0)
        
        # Analyser la disponibilit√© du stock
        stock_magasin_net = stock_magasin - commandes_a_livrer
        depend_reappro = stock_magasin_net < quantite_demandee
        manque_unites = max(0, quantite_demandee - stock_magasin_net)
        
        # ‚úÖ AM√âLIORATION: Messages d'analyse plus d√©taill√©s
        if depend_reappro:
            if stock_a_recevoir >= manque_unites:
                # Stock suffisant avec r√©approvisionnement
                analyse_stock = f"‚ö†Ô∏è STOCK MAGASIN INSUFFISANT : {stock_magasin_net} disponibles vs {quantite_demandee} demand√©es"
                consequence = f"- Manque {manque_unites} unit√©s - LIVRAISON D√âPEND DU R√âAPPROVISIONNEMENT ({stock_a_recevoir} en commande)"
            else:
                # Rupture m√™me avec r√©approvisionnement
                analyse_stock = f"üö® RUPTURE TOTALE : Stock total futur insuffisant"
                consequence = f"- Stock futur: {stock_magasin_net + stock_a_recevoir} vs {quantite_demandee} demand√©es - RUPTURE CRITIQUE"
        else:
            analyse_stock = "‚úÖ STOCK MAGASIN SUFFISANT pour livraison imm√©diate"
            consequence = "- LIVRAISON IMM√âDIATE POSSIBLE"
        
        return f"""Tu es un assistant commercial expert chez Butterfly Packaging.
Analyse cette commande et g√©n√®re un commentaire professionnel en fran√ßais d'UNE PHRASE qui r√©sume l'analyse.

üì¶ COMMANDE ANALYS√âE :
- Produit : {commande_info.get('nom_produit', 'N/A')}
- Quantit√© demand√©e : {quantite_demandee}
- Prix propos√© : {commande_info.get('prix_propose', 'N/A')}

üìä ANALYSE STOCK D√âTAILL√âE :
- Stock physique magasin : {stock_magasin}
- Stock √† recevoir (r√©approvisionnement) : {stock_a_recevoir}
- Commandes √† livrer : {commandes_a_livrer}
- Stock net magasin : {stock_magasin_net}
- Quantit√© demand√©e : {quantite_demandee}
- Stock total disponible : {commande_info.get('stock_disponible', 0)}

üö® ANALYSE CRITIQUE :
{analyse_stock}
{consequence}

üí∞ ANALYSE MARGE :
- Marge calcul√©e : {commande_info.get('marge_calculee', 0)}‚Ç¨
- Marge suffisante : {commande_info.get('marge_suffisante', False)}

üöö D√âLAI : {commande_info.get('delai_livraison', 'N/A')}

‚ö†Ô∏è ALERTES : {commande_info.get('alertes', 'Aucune')}

POINTS CL√âS √Ä ANALYSER :

1. ‚úÖ Si stock magasin net suffisant : Valider directement
2. ‚ö†Ô∏è Si d√©pend du r√©approvisionnement MAIS stock total futur suffisant : 
   - MENTIONNER cette d√©pendance clairement
   - Pr√©ciser "Livraison d√©pend du r√©approvisionnement" 
   - Indiquer les quantit√©s (stock actuel vs en commande)
3. üö® Si rupture totale (m√™me avec r√©approvisionnement) : Expliquer le d√©ficit
4. üí∞ Situation de la marge : Signaler si probl√©matique
5. ‚ùå Si impossible : Expliquer la raison principale

IMPORTANT : 
- Si la commande d√©pend du stock √† recevoir, TOUJOURS l'indiquer dans le commentaire
- Distinguer "d√©pend du r√©approvisionnement" (informatif) de "rupture totale" (critique)
- √ätre transparent sur les d√©lais et conditions
- Utiliser un ton professionnel mais naturel

EXEMPLES DE COMMENTAIRES :
- Stock suffisant imm√©diat : "‚úÖ Commande valid√©e"
- D√©pend du r√©approvisionnement : "‚ö†Ô∏è Livraison d√©pend du r√©approvisionnement - Stock actuel: X, En commande: Y"
- Rupture totale : "üö® RUPTURE DE STOCK - Stock total insuffisant"

G√©n√®re UN commentaire d'analyse commercial concis et informatif (maximum 20 mots)."""

    @staticmethod
    def get_stock_alert_prompt(produit_info: Dict[str, Any]) -> str:
        """
        Template pour les alertes de stock faible.
        
        Args:
            produit_info: Informations sur le produit en rupture/stock faible
            
        Returns:
            str: Prompt format√© pour alerte stock
        """
        return f"""Tu es un assistant logistique chez Butterfly Packaging.
G√©n√®re un commentaire d'alerte de stock en fran√ßais.

üì¶ PRODUIT EN ALERTE :
- Nom : {produit_info.get('nom_produit', 'N/A')}
- Stock actuel : {produit_info.get('stock_actuel', 0)}
- Seuil minimum : {produit_info.get('seuil_minimum', 0)}
- D√©lai r√©approvisionnement : {produit_info.get('delai_reappro', 'N/A')}

G√©n√®re UN commentaire d'alerte concis (maximum 12 mots) format :
"ALERTE STOCK - [situation] - [action requise]"

Exemples :
- "ALERTE STOCK - Stock critique - R√©approvisionnement urgent"
- "ALERTE STOCK - Rupture imminente - Commander maintenant"
"""

    @staticmethod
    def get_margin_analysis_prompt(marge_info: Dict[str, Any]) -> str:
        """
        Template pour l'analyse des marges.
        
        Args:
            marge_info: Informations sur les marges du produit
            
        Returns:
            str: Prompt format√© pour analyse marge
        """
        return f"""Tu es un analyste financier chez Butterfly Packaging.
Analyse la rentabilit√© de cette vente.

üí∞ ANALYSE MARGE :
- Prix de vente propos√© : {marge_info.get('prix_vente', 0)}‚Ç¨
- Prix d'achat : {marge_info.get('prix_achat', 0)}‚Ç¨
- Marge calcul√©e : {marge_info.get('marge_calculee', 0)}‚Ç¨
- Marge minimum requise : {marge_info.get('marge_minimum', 0)}‚Ç¨
- Pourcentage de marge : {marge_info.get('pourcentage_marge', 0)}%

G√©n√®re UN commentaire de rentabilit√© (maximum 10 mots) :
- Si marge OK : "Marge acceptable - Vente rentable"
- Si marge faible : "Marge faible - N√©gociation recommand√©e"
- Si marge insuffisante : "Marge insuffisante - Vente non rentable"
"""

    @staticmethod
    def get_delivery_analysis_prompt(delai_info: Dict[str, Any]) -> str:
        """
        Template pour l'analyse des d√©lais de livraison.
        
        Args:
            delai_info: Informations sur les d√©lais
            
        Returns:
            str: Prompt format√© pour analyse d√©lai
        """
        return f"""Tu es un planificateur logistique chez Butterfly Packaging.
Analyse la faisabilit√© des d√©lais.

üöö ANALYSE D√âLAI :
- Date demand√©e : {delai_info.get('date_demandee', 'N/A')}
- D√©lai standard : {delai_info.get('delai_standard', 'N/A')}
- Stock disponible : {delai_info.get('stock_disponible', False)}
- R√©approvisionnement n√©cessaire : {delai_info.get('reappro_necessaire', False)}

G√©n√®re UN commentaire de d√©lai (maximum 12 mots) :
- Si d√©lai OK : "Livraison possible dans les d√©lais"
- Si d√©lai serr√© : "D√©lai serr√© - Priorit√© √† donner"
- Si d√©lai impossible : "D√©lai impossible - Reporter livraison"
"""

    @staticmethod
    def get_alternative_suggestion_prompt(alternative_info: Dict[str, Any]) -> str:
        """
        Template pour sugg√©rer des alternatives.
        
        Args:
            alternative_info: Informations sur les alternatives disponibles
            
        Returns:
            str: Prompt format√© pour suggestions alternatives
        """
        return f"""Tu es un conseiller commercial chez Butterfly Packaging.
Propose une alternative au client.

üîÑ SITUATION :
- Produit demand√© : {alternative_info.get('produit_demande', 'N/A')}
- Probl√®me : {alternative_info.get('probleme', 'N/A')}
- Alternative propos√©e : {alternative_info.get('alternative_nom', 'N/A')}
- Stock alternative : {alternative_info.get('alternative_stock', 0)}

G√©n√®re UN commentaire de suggestion (maximum 15 mots) :
Format : "Alternative disponible - [nom produit] - Stock : [quantit√©]"

Exemple : "Alternative disponible - Caisse renforc√©e - Stock : 500 unit√©s"
"""

    @staticmethod
    def get_general_product_comment_prompt(produit_info: Dict[str, Any]) -> str:
        """
        Template pour commentaire g√©n√©ral sur un produit.
        
        Args:
            produit_info: Informations g√©n√©rales sur le produit
            
        Returns:
            str: Prompt format√© pour commentaire g√©n√©ral
        """
        return f"""Tu es un expert produit chez Butterfly Packaging.
G√©n√®re un commentaire descriptif professionnel.

üì¶ PRODUIT :
- Nom : {produit_info.get('nom_produit', 'N/A')}
- Cat√©gorie : {produit_info.get('categorie', 'N/A')}
- Stock : {produit_info.get('stock', 0)}
- Prix : {produit_info.get('prix', 0)}‚Ç¨
- Caract√©ristiques : {produit_info.get('caracteristiques', 'N/A')}

G√©n√®re UN commentaire produit professionnel (maximum 20 mots) qui inclut :
- Type de produit
- Stock disponible
- Prix indicatif

Format : "[Type] - Stock: [quantit√©] unit√©s - Prix: [prix]‚Ç¨"
Exemple : "Emballage carton - Stock: 300 unit√©s - Prix: 2,50‚Ç¨"
""" 

    # === TEMPLATES DE G√âN√âRATION DE MAILS D'ALERTE ===
    
    @staticmethod
    def get_commercial_alert_email_prompt(alerte_info: Dict[str, Any]) -> str:
        """
        Template pour g√©n√©rer un mail d'alerte au commercial.
        
        Args:
            alerte_info: Informations sur l'alerte √† envoyer
            
        Returns:
            str: Prompt format√© pour g√©n√©ration de mail
        """
        return f"""Tu es un assistant IA chez Butterfly Packaging charg√© d'alerter l'√©quipe commerciale.
G√©n√®re un mail d'alerte professionnel en fran√ßais pour pr√©venir d'un probl√®me de commande.

üìß INFORMATIONS DE L'ALERTE :
- Type de probl√®me : {alerte_info.get('type_probleme', 'N/A')}
- Client : {alerte_info.get('nom_client', 'Client non sp√©cifi√©')}
- Produit : {alerte_info.get('nom_produit', 'N/A')}
- Quantit√© demand√©e : {alerte_info.get('quantite_demandee', 0)}
- Prix propos√© : {alerte_info.get('prix_propose', 'N/A')}

üìä D√âTAILS DU PROBL√àME :
- Stock magasin : {alerte_info.get('stock_magasin', 0)}
- Stock √† recevoir : {alerte_info.get('stock_a_recevoir', 0)}
- Stock disponible total : {alerte_info.get('stock_disponible', 0)}
- Marge calcul√©e : {alerte_info.get('marge_calculee', 'N/A')}‚Ç¨
- Marge minimum : {alerte_info.get('marge_minimum', 'N/A')}‚Ç¨

‚ö†Ô∏è URGENCE : {alerte_info.get('niveau_urgence', 'NORMALE')}

üîÑ ALTERNATIVES RAG DISPONIBLES :
- Solutions trouv√©es par IA : {alerte_info.get('alternatives_rag_disponibles', False)}
- Nombre d'alternatives : {alerte_info.get('nb_alternatives_rag', 0)}
- Top alternatives : {alerte_info.get('top_alternatives', [])}

üìã RECOMMANDATIONS AGENT IA POUR LE COMMERCIAL :

SI alternatives disponibles, inclure OBLIGATOIREMENT ce guide :

=== GUIDE COMMERCIAL - R√âSOLUTION PROBL√àME ===
1. DIAGNOSTIC RAPIDE :
   - Identifier le probl√®me principal (stock/marge/d√©lai)
   - √âvaluer l'urgence client
   - Prioriser les solutions alternatives

2. PLAN D'ACTION RECOMMAND√â :
   - Alternative 1 : [Nom + Disponibilit√© + Pourquoi la choisir]
   - Alternative 2 : [Nom + Avantages + Arguments clients]
   - Alternative 3 : [Nom + D√©lais + Conditions]

3. APPROCHE CLIENT :
   - Expliquer la situation avec transparence
   - Pr√©senter les alternatives comme am√©lioration
   - N√©gocier conditions avantageuses

G√©n√®re un mail avec :
- Objet percutant (max 60 caract√®res)
- Corps du message professionnel et pr√©cis
- Recommandations d√©taill√©es de l'agent IA
- Plan d'action concret pour le commercial

Format de r√©ponse :
OBJET: [objet du mail]
CORPS:
[corps du message avec recommandations d√©taill√©es de l'agent IA]

‚úÖ STRUCTURE OBLIGATOIRE DU MAIL :
1. Probl√®me identifi√© (description pr√©cise)
2. Alternatives recommand√©es par l'IA (d√©tails complets)
3. Strat√©gie commerciale pour chaque alternative
4. Actions imm√©diates et plan de contact client"""

    @staticmethod
    def get_stock_shortage_email_prompt(rupture_info: Dict[str, Any]) -> str:
        """
        Template pour mail d'alerte rupture de stock.
        
        Args:
            rupture_info: Informations sur la rupture de stock
            
        Returns:
            str: Prompt pour mail de rupture
        """
        # Calculer les donn√©es de stock correctes
        stock_magasin = rupture_info.get('stock_magasin', 0)
        stock_a_recevoir = rupture_info.get('stock_a_recevoir', 0)
        commandes_a_livrer = rupture_info.get('commandes_a_livrer', 0)
        stock_disponible = rupture_info.get('stock_disponible', 0)
        quantite_demandee = rupture_info.get('quantite_demandee', 0)
        
        # Calculer le manque r√©el
        manque_reel = max(0, quantite_demandee - stock_disponible)
        
        # Calculer la situation d√©taill√©e
        if stock_disponible >= quantite_demandee:
            situation_detaillee = "Stock suffisant pour livraison imm√©diate"
        else:
            situation_detaillee = "Stock insuffisant - Livraison partielle possible (" + str(stock_disponible) + " sur " + str(quantite_demandee) + ") ou attendre r√©approvisionnement"
        
        return f"""Tu es un gestionnaire de stock chez Butterfly Packaging.
G√©n√®re un mail d'alerte pour une situation de stock probl√©matique.

üì¶ SITUATION DE STOCK :
- Produit : {rupture_info.get('nom_produit', 'N/A')}
- Stock physique magasin : {stock_magasin} unit√©s
- Stock √† recevoir (r√©approvisionnement) : {stock_a_recevoir} unit√©s
- Commandes en attente de livraison : {commandes_a_livrer} unit√©s
- Stock net disponible : {stock_disponible} unit√©s
- Commande client demand√©e : {quantite_demandee} unit√©s
- Unit√©s manquantes : {manque_reel} unit√©s
- D√©lai r√©approvisionnement : {rupture_info.get('delai_livraison', 'N/A')}

üë§ CLIENT CONCERN√â :
- Nom : {rupture_info.get('nom_client', 'N/A')}
- Urgence : {rupture_info.get('urgence_commande', 'NORMALE')}

üéØ SITUATION D√âTAILL√âE :
{situation_detaillee}

üîÑ ALTERNATIVES RAG DISPONIBLES :
- Alternatives trouv√©es : {rupture_info.get('alternatives_rag_disponibles', False)}
- Nombre d'alternatives : {rupture_info.get('nb_alternatives_rag', 0)}
- Top alternatives : {rupture_info.get('top_alternatives', [])}

üìã RECOMMANDATIONS AGENT IA POUR LE COMMERCIAL :

SI alternatives disponibles, inclure OBLIGATOIREMENT ce guide commercial :

=== GUIDE COMMERCIAL - ALTERNATIVES ===
1. SOLUTIONS IMM√âDIATES :
   - Pr√©senter les alternatives par ordre de pr√©f√©rence (stock disponible d'abord)
   - Expliquer les avantages de chaque alternative vs produit original
   - Proposer adaptation tarifaire si n√©cessaire

2. STRAT√âGIE DE N√âGOCIATION :
   - Alternative 1 : [Nom + Stock + Pourquoi la recommander]
   - Alternative 2 : [Nom + Stock + Avantages commerciaux]
   - Alternative 3 : [Nom + Stock + Arguments techniques]

3. ARGUMENTS CLIENTS :
   - D√©lais respect√©s avec stock imm√©diat
   - Qualit√© √©quivalente ou sup√©rieure
   - Prix comp√©titif maintenu

G√©n√®re un mail d'alerte pr√©cis :
OBJET: [objet court et percutant]
CORPS:
[message professionnel avec situation exacte ET recommandations d√©taill√©es de l'agent IA]

‚úÖ STRUCTURE OBLIGATOIRE DU MAIL :
1. Situation actuelle (chiffres exacts)
2. Alternatives recommand√©es par l'IA (noms, stocks, avantages)
3. Guide strat√©gique pour n√©gocier avec le client
4. Actions imm√©diates √† prendre

Important : Utiliser les chiffres exacts fournis ci-dessus, pas de valeurs approximatives !"""

    @staticmethod 
    def get_margin_alert_email_prompt(marge_info: Dict[str, Any]) -> str:
        """
        Template pour mail d'alerte marge insuffisante.
        
        Args:
            marge_info: Informations sur le probl√®me de marge
            
        Returns:
            str: Prompt pour mail de marge
        """
        return f"""Tu es un analyste financier chez Butterfly Packaging.
G√©n√®re un mail d'alerte pour une marge insuffisante n√©cessitant n√©gociation.

üí∞ PROBL√àME DE MARGE :
- Produit : {marge_info.get('nom_produit', 'N/A')}
- Prix propos√© client : {marge_info.get('prix_propose', 0)}‚Ç¨
- Prix d'achat : {marge_info.get('prix_achat', 0)}‚Ç¨
- Marge calcul√©e : {marge_info.get('marge_calculee', 0)}‚Ç¨
- Marge minimum requise : {marge_info.get('marge_minimum', 0)}‚Ç¨
- D√©ficit : {marge_info.get('deficit_marge', 0)}‚Ç¨

üë§ CLIENT :
- Nom : {marge_info.get('nom_client', 'N/A')}
- Quantit√© : {marge_info.get('quantite', 0)} unit√©s
- Valeur commande : {marge_info.get('valeur_totale', 0)}‚Ç¨

üîÑ ALTERNATIVES RAG DISPONIBLES :
- Solutions alternatives : {marge_info.get('alternatives_rag_disponibles', False)}
- Nombre d'options : {marge_info.get('nb_alternatives_rag', 0)}
- Top alternatives : {marge_info.get('top_alternatives', [])}

üìã RECOMMANDATIONS AGENT IA POUR MARGE :

SI alternatives disponibles, inclure OBLIGATOIREMENT ce guide :

=== GUIDE COMMERCIAL - STRAT√âGIES MARGE ===
1. ANALYSE FINANCI√àRE :
   - Calculer le prix minimum rentable
   - √âvaluer l'impact sur la rentabilit√© globale
   - Proposer alternatives avec marge correcte

2. STRAT√âGIES DE N√âGOCIATION :
   - Alternative 1 : [Nom + Marge + Pourquoi la recommander]
   - Alternative 2 : [Nom + Prix + Avantages √©conomiques]
   - Option remise : [Conditions + Limites]

3. ARGUMENTS COMMERCIAUX :
   - Maintien de la qualit√© avec alternatives
   - Volume compens√© par marge correcte
   - Partenariat long terme pr√©serv√©

G√©n√®re un mail strat√©gique :
OBJET: [objet professionnel]
CORPS:
[analyse financi√®re + recommandations d√©taill√©es de l'agent IA + strat√©gies concr√®tes]

‚úÖ STRUCTURE OBLIGATOIRE DU MAIL :
1. Probl√®me de marge (chiffres pr√©cis)
2. Alternatives recommand√©es par l'IA (noms, marges, avantages)
3. Strat√©gies de n√©gociation concr√®tes
4. Prix minimum acceptable et conditions"""